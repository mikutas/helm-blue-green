version: 2.1
orbs:
  awscli: circleci/aws-cli@1.2.1 # https://circleci.com/orbs/registry/orb/circleci/aws-cli
  awsecr: circleci/aws-ecr@6.7.0 # https://circleci.com/orbs/registry/orb/circleci/aws-ecr
  kube: circleci/kubernetes@0.11.0 # https://circleci.com/orbs/registry/orb/circleci/kubernetes
  helm: circleci/helm@0.2.3 #https://circleci.com/orbs/registry/orb/circleci/helm
  build-skipper: # AWS CLI & jq required
    commands:
      skip:
        parameters:
          repository:
            type: string
        steps:
          - run:
                name: Check whether image already exists
                command: |
                  set +e
                  aws ecr list-images --filter tagStatus=TAGGED --repository-name <<parameters.repository>> | \
                  jq '.imageIds[].imageTag' | grep $CIRCLE_SHA1; echo $? > exit_code; cat exit_code
          - run:
              name: Exit if image already exists
              command: |
                if [ $(cat exit_code) -eq "0" ]; then
                  circleci-agent step halt;
                fi
                rm exit_code

jobs:
  build:
    executor: awsecr/default
    environment:
      AWS_ECR_ACCOUNT_URL: ""
      AWS_ECR_ACCOUNT_URL_PROD: ""
      IMAGE_REPO: ""
      IMAGE_REPO_PROD: ""
      DOCKERFILE_STAGE: develop
      DOCKERFILE_STAGE_PROD: master
    steps:
      - run:
          name: Overwrite ENV
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              echo "export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID_PROD}" >> $BASH_ENV
              echo "export AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID_PROD}" >> $BASH_ENV
              echo "export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY_PROD}" >> $BASH_ENV
              echo "export AWS_ECR_ACCOUNT_URL=${AWS_ECR_ACCOUNT_URL_PROD}" >> $BASH_ENV
              echo "export IMAGE_REPO=$IMAGE_REPO_PROD" >> $BASH_ENV
              echo "export DOCKERFILE_STAGE=$DOCKERFILE_STAGE_PROD" >> $BASH_ENV
            fi
      - build-skipper/skip:
          repository: $IMAGE_REPO
      - awsecr/build-and-push-image:
          extra-build-args: --target $DOCKERFILE_STAGE
          region: AWS_DEFAULT_REGION
          repo: $IMAGE_REPO
          tag: $CIRCLE_SHA1
      - run:
          name: Also push latest tag
          command: |
            docker tag $AWS_ECR_ACCOUNT_URL/$IMAGE_REPO:$CIRCLE_SHA1 $AWS_ECR_ACCOUNT_URL/$IMAGE_REPO:latest
            docker push $AWS_ECR_ACCOUNT_URL/$IMAGE_REPO:latest

  deploy:
    executor: awscli/default
    environment:
      AWS_ECR_ACCOUNT_URL: ""
      AWS_ECR_ACCOUNT_URL_PROD: ""
      IMAGE_REPO: ""
      IMAGE_REPO_PROD: ""
      CLUSTER_DEV: ""
      CLUSTER_PROD: ""
    steps:
      - checkout
      - run:
          name: Overwrite ENV
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              echo "export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_PROD" >> $BASH_ENV
              echo "export AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID_PROD" >> $BASH_ENV
              echo "export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_PROD" >> $BASH_ENV
              echo "export AWS_ECR_ACCOUNT_URL=$AWS_ECR_ACCOUNT_URL_PROD" >> $BASH_ENV
              echo "export IMAGE_REPO=$IMAGE_REPO_PROD" >> $BASH_ENV
            fi
      - awscli/install
      - kube/install-kubectl
      - run:
          name: Update kubeconfig
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              aws eks update-kubeconfig --name $CLUSTER_PROD
            else
              aws eks update-kubeconfig --name $CLUSTER_DEV
            fi
            kubectl get po
      - helm/install-helm-client:
          version: v3.3.0
      - run:
          name: Install helm-secrets and sops
          command: |
            helm plugin install https://github.com/futuresimple/helm-secrets
            wget https://github.com/mozilla/sops/releases/download/v3.5.0/sops_3.5.0_amd64.deb
            sudo dpkg -i sops_3.5.0_amd64.deb
      - run:
          name: Deploy
          command: >
            helm secrets upgrade --install
            app kubernetes/helm/app
            --set environment=$CIRCLE_BRANCH
            --set image.repository=$AWS_ECR_ACCOUNT_URL/$IMAGE_REPO
            --set image.tag=$CIRCLE_SHA1
            --wait --timeout 10m
            --history-max 50

  switch:
    executor: awscli/default
    environment:
      CLUSTER_DEV: ""
      CLUSTER_PROD: ""
    steps:
      - checkout
      - run:
          name: Overwrite ENV
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              echo "export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID_PROD}" >> $BASH_ENV
              echo "export AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID_PROD}" >> $BASH_ENV
              echo "export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY_PROD}" >> $BASH_ENV
            fi
      - awscli/install
      - kube/install-kubectl
      - run:
          name: Update kubeconfig
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              aws eks update-kubeconfig --name $CLUSTER_PROD
            else
              aws eks update-kubeconfig --name $CLUSTER_DEV
            fi
            kubectl get po
      - run:
          name: Install Argo Rollouts kubectl plugin
          command: |
            curl -LO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
            chmod +x ./kubectl-argo-rollouts-linux-amd64
            sudo mv ./kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts
      - run:
          name: Promote Rollout
          command: >
            kubectl-argo-rollouts promote app

workflows:
  version: 2
  build-deploy-switch:
    jobs:
      - build:
          filters:
            branches:
              only:
                - master
                - develop
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - master
                - develop
      - hold:
          type: approval
          requires:
            - deploy
          filters:
            branches:
              only:
                - master
                - develop
      - switch:
          requires:
            - hold
          filters:
            branches:
              only:
                - master
                - develop
